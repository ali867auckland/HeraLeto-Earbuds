/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.wbd101.hlt010;
// Difference between this file and AndroidHRVAPI file is that this holds the data while the other file only retrieves
public class hrv_result_t {
  private transient long swigCPtr; //Referencing the native file 
  protected transient boolean swigCMemOwn; // Checks whether the java file is in charge of memory, and frees it if needed if set to True?

  protected hrv_result_t(long cPtr, boolean cMemoryOwn) { // Creates a hrv_result_t object from the native pointer
    swigCMemOwn = cMemoryOwn; // Initializes object with the memory address of the native source
    swigCPtr = cPtr; //Uses the native pointer(cPtr) and the ownership flag(cMemoryOwn)
  }

  protected static long getCPtr(hrv_result_t obj) { // Method to help retrive the native pointer, returns the memory address of the native object
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() { // Ensuring that the native memory is freed properly when the java object is garbarge-collected
    delete(); //calls delete to release native object
  }

  public synchronized void delete() { // Method used to delete the native hrv_result_t object and free up memory, only frees if java object owns it
    if (swigCPtr != 0) {              // Only if swigCMemOwn is True
      if (swigCMemOwn) {
        swigCMemOwn = false;
        AndroidHRVAPIJNI.delete_hrv_result_t(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  // Access Methods, calling to the java files which calls the native functions
  public long getTotal_rr_cnt() { // Retrives and stores the total RR count
    return AndroidHRVAPIJNI.hrv_result_t_total_rr_cnt_get(swigCPtr, this);
  }

  public int getWindow_rr_cnt() { // Retruves and stores the Window RR count
    return AndroidHRVAPIJNI.hrv_result_t_window_rr_cnt_get(swigCPtr, this);
  }

  public int getValid_rr_cnt() { // Retrives and stores the valid RR counts
    return AndroidHRVAPIJNI.hrv_result_t_valid_rr_cnt_get(swigCPtr, this);
  }

  public int getResult_timestamp() { //Retrives and stores the timestamp of the HRV analysis result
    return AndroidHRVAPIJNI.hrv_result_t_result_timestamp_get(swigCPtr, this);
  }

  public byte getResult_conf_level() { // Retrives and stores the confidence level of the analysis result
    return AndroidHRVAPIJNI.hrv_result_t_result_conf_level_get(swigCPtr, this);
  }

  public short getStress_index() { // Retrieves and stores the stress index
    return AndroidHRVAPIJNI.hrv_result_t_stress_index_get(swigCPtr, this);
  }

  public byte getPNN50() { // Retrives and stores the percentage of successive RR interfals that differ by 50ms
    return AndroidHRVAPIJNI.hrv_result_t_pNN50_get(swigCPtr, this);
  }

  public float getRMSSD() { // Retrieves and stores the Root mean square of successive differences, time domain
    return AndroidHRVAPIJNI.hrv_result_t_rMSSD_get(swigCPtr, this);
  }

  public float getSDNN180() { // Retriving the SDNN with a 180 time window
    return AndroidHRVAPIJNI.hrv_result_t_SDNN180_get(swigCPtr, this);
  }

  public float getHRV_Score() { // Retrieves and stores the hrv score
    return AndroidHRVAPIJNI.hrv_result_t_HRV_Score_get(swigCPtr, this);
  }

  public float getDfa_slope1() { // Retrieves the detrended fluctuation analysis
    return AndroidHRVAPIJNI.hrv_result_t_dfa_slope1_get(swigCPtr, this);
  }

  public float getDfa_slope2() { // Retrieves the detrended fluctuation analysis
    return AndroidHRVAPIJNI.hrv_result_t_dfa_slope2_get(swigCPtr, this);
  }

  public byte getRespiratory_rate() { // Retrieves the respiratory rate 
    return AndroidHRVAPIJNI.hrv_result_t_respiratory_rate_get(swigCPtr, this);
  }

  public float getVlf() { // Retrieves and stores very low frequency bands of HRV
    return AndroidHRVAPIJNI.hrv_result_t_vlf_get(swigCPtr, this);
  }

  public float getLf() { // Retrieves and stores low frequency bands of HRV
    return AndroidHRVAPIJNI.hrv_result_t_lf_get(swigCPtr, this);
  }

  public float getHf() { // Retrieves and stores high frequency bands of HRV
    return AndroidHRVAPIJNI.hrv_result_t_hf_get(swigCPtr, this);
  }

  public float getLf_nu() { // Retrieves and stores low frequency bands of HRV
    return AndroidHRVAPIJNI.hrv_result_t_lf_nu_get(swigCPtr, this);
  }

  public float getHf_nu() { // Retrieves and stores high frequency bands of HRV
    return AndroidHRVAPIJNI.hrv_result_t_hf_nu_get(swigCPtr, this);
  }

  public float getLf_to_hf() { // Retrieves and stores the ratio between low and high frequency bands of HRV
    return AndroidHRVAPIJNI.hrv_result_t_lf_to_hf_get(swigCPtr, this);
  }

  public float getTotal_power() { // Retrieves and stores the total power of the HRV spectrum
    return AndroidHRVAPIJNI.hrv_result_t_total_power_get(swigCPtr, this);
  }

  public hrv_result_t() { // Constructor initializing a new instance of the hrv_result_t object by calling the native new_hrv_result_t 
    this(AndroidHRVAPIJNI.new_hrv_result_t(), true);  // function from the ANDROIDHRVAPIJNI class
  } //Owns the native memory if swigCMemOwn is set to True

}
